@page "/LearnBlazor/BindProp"

@* <PageTitle>Product</PageTitle> *@
<h2 class="text-success">Individual Product</h2>
<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3>
        <hr />
        <div>
        Active: <input type="checkbox" @bind-value="@Product.IsActive" checked="@Product.IsActive"/>
        </div>
        <div>
        Price: <input type="number" @bind-value="@Product.Price" @bind-value:event="oninput"/>
        </div>
        <div>
        Product Properties:
        <select @bind="@SelectedProp">
            @foreach (var property in Product.ProductProperties)
            {
                <option value="@property.Key">@property.Value</option>
            }
        </select>
        </div>
    </div>
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Summary</h3>
        <hr />
        Name: @Product.Name
        <br />
        Active: @Product.IsActive
        <br />
        Price: @Product.Price
        <br />
        This product is: @(Product.IsActive ? "Active": "Inactive")
        <br />
        Selected Property: @SelectedProp
        @if (!string.IsNullOrWhiteSpace(SelectedProp))
        {
            <p>
                Property Value: @Product.ProductProperties.FirstOrDefault(pp=> pp.Key == SelectedProp)?.Value
            </p>
        }
    </div>
    <div class="col-12 pt-4">
        <h2 class="text-success">Product Table</h2>
        <table class="table table-striped">
            <tbody>
                @foreach(var product in Products)
                {
                    <tr>
                        <td>
                            <input type="text" @bind-value="product.Name" @bind-value:event="oninput" />
                        </td>
                        <td>
                            <input type="text" @bind-value="product.Price" @bind-value:event="oninput" />
                        </td>
                        <td>
                            <input type="checkbox" @bind-value="product.IsActive" checked="@(product.IsActive? "checked": null)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <br />
        <h2>Product Summary</h2>
        @foreach (var product in Products)
        {
            <p>
                @product.Name [@product.Price] is @(product.IsActive ? "Active" : "Inactive")
            </p>
        }
    </div>
</div>
@code {
    private string SelectedProp = string.Empty;

    DemoProduct Product = new()
    {
        Id = 1,
        Name = "First Product",
        IsActive = true,
        Price = 10.99m,
        ProductProperties = new List<DemoProductProp>()
        {
            new DemoProductProp(){ Id = 1, Key = "Color", Value = "Black" },
            new DemoProductProp(){ Id = 2, Key = "Flavor", Value = "Rose Jasmine" },
            new DemoProductProp(){ Id = 3, Key = "Size", Value = "20oz" }
        }
    };

    List<DemoProduct> Products = new();

    protected override async Task OnInitializedAsync()
    {
        Products.Add(new DemoProduct()
        {
            Id = 1,
            Name = "Midnight Blaze",
            IsActive = false,
            Price = 10.99m,
            ProductProperties = new()
            {
                new DemoProductProp() { Id = 1, Key = "Flavor", Value = "Rose" },
                new DemoProductProp() { Id = 2, Key = "Size", Value = "20oz" },
                new DemoProductProp() { Id = 3, Key = "Color", Value = "Purple" }
            }
        });

        Products.Add(new DemoProduct()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            Price = 13.99m,
            ProductProperties = new()
            {
                new DemoProductProp() { Id = 1, Key = "Flavor", Value = "Lily" },
                new DemoProductProp() { Id = 2, Key = "Size", Value = "18oz" },
                new DemoProductProp() { Id = 3, Key = "Color", Value = "White" }
            }
        });

        await base.OnInitializedAsync();
    }
}
